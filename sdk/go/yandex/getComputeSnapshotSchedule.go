// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/agorobets/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Compute snapshot schedule. For more information, see [the official documentation](https://yandex.cloud/docs/compute/concepts/snapshot-schedule).
//
// ## Example Usage
//
// {{ tffile "examples/compute_snapshot_schedule/d_compute_snapshot_schedule_1.tf" }}
func LookupComputeSnapshotSchedule(ctx *pulumi.Context, args *LookupComputeSnapshotScheduleArgs, opts ...pulumi.InvokeOption) (*LookupComputeSnapshotScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComputeSnapshotScheduleResult
	err := ctx.Invoke("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputeSnapshotSchedule.
type LookupComputeSnapshotScheduleArgs struct {
	// An optional description of this snapshot schedule.
	Description *string `pulumi:"description"`
	// IDs of the disks of this snapshot schedule.
	DiskIds []string `pulumi:"diskIds"`
	// ID of the folder that the snapshot schedule belongs to.
	FolderId *string `pulumi:"folderId"`
	// A map of labels applied to this snapshot schedule.
	Labels map[string]string `pulumi:"labels"`
	// The name of the snapshot schedule.
	//
	// > One of `snapshotScheduleId` or `name` should be specified.
	Name *string `pulumi:"name"`
	// Retention period applied to snapshots created by this snapshot schedule.
	RetentionPeriod *string `pulumi:"retentionPeriod"`
	// Schedule policy of the snapshot schedule.
	SchedulePolicies []GetComputeSnapshotScheduleSchedulePolicy `pulumi:"schedulePolicies"`
	// Maximum number of snapshots for every disk of the snapshot schedule.
	SnapshotCount *int `pulumi:"snapshotCount"`
	// The ID of a specific snapshot schedule.
	SnapshotScheduleId *string `pulumi:"snapshotScheduleId"`
	// Additional attributes for snapshots created by this snapshot schedule.
	SnapshotSpecs []GetComputeSnapshotScheduleSnapshotSpec `pulumi:"snapshotSpecs"`
}

// A collection of values returned by getComputeSnapshotSchedule.
type LookupComputeSnapshotScheduleResult struct {
	// SnapshotSchedule creation timestamp.
	CreatedAt string `pulumi:"createdAt"`
	// An optional description of this snapshot schedule.
	Description string `pulumi:"description"`
	// IDs of the disks of this snapshot schedule.
	DiskIds []string `pulumi:"diskIds"`
	// ID of the folder that the snapshot schedule belongs to.
	FolderId string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A map of labels applied to this snapshot schedule.
	Labels map[string]string `pulumi:"labels"`
	Name   string            `pulumi:"name"`
	// Retention period applied to snapshots created by this snapshot schedule.
	RetentionPeriod string `pulumi:"retentionPeriod"`
	// Schedule policy of the snapshot schedule.
	SchedulePolicies []GetComputeSnapshotScheduleSchedulePolicy `pulumi:"schedulePolicies"`
	// Maximum number of snapshots for every disk of the snapshot schedule.
	SnapshotCount      int    `pulumi:"snapshotCount"`
	SnapshotScheduleId string `pulumi:"snapshotScheduleId"`
	// Additional attributes for snapshots created by this snapshot schedule.
	SnapshotSpecs []GetComputeSnapshotScheduleSnapshotSpec `pulumi:"snapshotSpecs"`
	// The status of the snapshot schedule.
	Status string `pulumi:"status"`
}

func LookupComputeSnapshotScheduleOutput(ctx *pulumi.Context, args LookupComputeSnapshotScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupComputeSnapshotScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupComputeSnapshotScheduleResultOutput, error) {
			args := v.(LookupComputeSnapshotScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getComputeSnapshotSchedule:getComputeSnapshotSchedule", args, LookupComputeSnapshotScheduleResultOutput{}, options).(LookupComputeSnapshotScheduleResultOutput), nil
		}).(LookupComputeSnapshotScheduleResultOutput)
}

// A collection of arguments for invoking getComputeSnapshotSchedule.
type LookupComputeSnapshotScheduleOutputArgs struct {
	// An optional description of this snapshot schedule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IDs of the disks of this snapshot schedule.
	DiskIds pulumi.StringArrayInput `pulumi:"diskIds"`
	// ID of the folder that the snapshot schedule belongs to.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// A map of labels applied to this snapshot schedule.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The name of the snapshot schedule.
	//
	// > One of `snapshotScheduleId` or `name` should be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Retention period applied to snapshots created by this snapshot schedule.
	RetentionPeriod pulumi.StringPtrInput `pulumi:"retentionPeriod"`
	// Schedule policy of the snapshot schedule.
	SchedulePolicies GetComputeSnapshotScheduleSchedulePolicyArrayInput `pulumi:"schedulePolicies"`
	// Maximum number of snapshots for every disk of the snapshot schedule.
	SnapshotCount pulumi.IntPtrInput `pulumi:"snapshotCount"`
	// The ID of a specific snapshot schedule.
	SnapshotScheduleId pulumi.StringPtrInput `pulumi:"snapshotScheduleId"`
	// Additional attributes for snapshots created by this snapshot schedule.
	SnapshotSpecs GetComputeSnapshotScheduleSnapshotSpecArrayInput `pulumi:"snapshotSpecs"`
}

func (LookupComputeSnapshotScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeSnapshotScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getComputeSnapshotSchedule.
type LookupComputeSnapshotScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupComputeSnapshotScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComputeSnapshotScheduleResult)(nil)).Elem()
}

func (o LookupComputeSnapshotScheduleResultOutput) ToLookupComputeSnapshotScheduleResultOutput() LookupComputeSnapshotScheduleResultOutput {
	return o
}

func (o LookupComputeSnapshotScheduleResultOutput) ToLookupComputeSnapshotScheduleResultOutputWithContext(ctx context.Context) LookupComputeSnapshotScheduleResultOutput {
	return o
}

// SnapshotSchedule creation timestamp.
func (o LookupComputeSnapshotScheduleResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// An optional description of this snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.Description }).(pulumi.StringOutput)
}

// IDs of the disks of this snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) DiskIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) []string { return v.DiskIds }).(pulumi.StringArrayOutput)
}

// ID of the folder that the snapshot schedule belongs to.
func (o LookupComputeSnapshotScheduleResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupComputeSnapshotScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// A map of labels applied to this snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupComputeSnapshotScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Retention period applied to snapshots created by this snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) RetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.RetentionPeriod }).(pulumi.StringOutput)
}

// Schedule policy of the snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) SchedulePolicies() GetComputeSnapshotScheduleSchedulePolicyArrayOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) []GetComputeSnapshotScheduleSchedulePolicy {
		return v.SchedulePolicies
	}).(GetComputeSnapshotScheduleSchedulePolicyArrayOutput)
}

// Maximum number of snapshots for every disk of the snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) SnapshotCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) int { return v.SnapshotCount }).(pulumi.IntOutput)
}

func (o LookupComputeSnapshotScheduleResultOutput) SnapshotScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.SnapshotScheduleId }).(pulumi.StringOutput)
}

// Additional attributes for snapshots created by this snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) SnapshotSpecs() GetComputeSnapshotScheduleSnapshotSpecArrayOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) []GetComputeSnapshotScheduleSnapshotSpec {
		return v.SnapshotSpecs
	}).(GetComputeSnapshotScheduleSnapshotSpecArrayOutput)
}

// The status of the snapshot schedule.
func (o LookupComputeSnapshotScheduleResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupComputeSnapshotScheduleResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComputeSnapshotScheduleResultOutput{})
}
