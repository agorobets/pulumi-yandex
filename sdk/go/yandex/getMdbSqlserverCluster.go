// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/agorobets/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed SQLServer cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-sqlserver/).
//
// ## Example Usage
//
// {{ tffile "examples/mdb_sqlserver_cluster/d_mdb_sqlserver_cluster_1.tf" }}
func LookupMdbSqlserverCluster(ctx *pulumi.Context, args *LookupMdbSqlserverClusterArgs, opts ...pulumi.InvokeOption) (*LookupMdbSqlserverClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdbSqlserverClusterResult
	err := ctx.Invoke("yandex:index/getMdbSqlserverCluster:getMdbSqlserverCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbSqlserverCluster.
type LookupMdbSqlserverClusterArgs struct {
	// The ID of the SQLServer cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Inhibits deletion of the cluster. Can be either `true` or `false`.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// The name of the SQLServer cluster.
	//
	// > Either `clusterId` or `name` should be specified.
	Name *string `pulumi:"name"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation *string `pulumi:"sqlcollation"`
	// SQLServer cluster config.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
}

// A collection of values returned by getMdbSqlserverCluster.
type LookupMdbSqlserverClusterResult struct {
	BackupWindowStarts []GetMdbSqlserverClusterBackupWindowStart `pulumi:"backupWindowStarts"`
	ClusterId          string                                    `pulumi:"clusterId"`
	// Creation timestamp of the key.
	CreatedAt string `pulumi:"createdAt"`
	// A database of the SQLServer cluster. The structure is documented below.
	Databases []GetMdbSqlserverClusterDatabase `pulumi:"databases"`
	// Inhibits deletion of the cluster. Can be either `true` or `false`.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// Description of the SQLServer cluster.
	Description string `pulumi:"description"`
	// Deployment environment of the SQLServer cluster.
	Environment string `pulumi:"environment"`
	FolderId    string `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health string `pulumi:"health"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds []string `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster. The structure is documented below.
	Hosts []GetMdbSqlserverClusterHost `pulumi:"hosts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of key/value label pairs to assign to the SQLServer cluster.
	Labels map[string]string `pulumi:"labels"`
	// The name of the database.
	Name string `pulumi:"name"`
	// ID of the network, to which the SQLServer cluster belongs.
	NetworkId string `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster. The structure is documented below.
	Resources []GetMdbSqlserverClusterResource `pulumi:"resources"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation string `pulumi:"sqlcollation"`
	// SQLServer cluster config.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
	// Status of the cluster.
	Status string `pulumi:"status"`
	// A user of the SQLServer cluster. The structure is documented below.
	Users []GetMdbSqlserverClusterUser `pulumi:"users"`
	// Version of the SQLServer cluster.
	Version string `pulumi:"version"`
}

func LookupMdbSqlserverClusterOutput(ctx *pulumi.Context, args LookupMdbSqlserverClusterOutputArgs, opts ...pulumi.InvokeOption) LookupMdbSqlserverClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMdbSqlserverClusterResultOutput, error) {
			args := v.(LookupMdbSqlserverClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("yandex:index/getMdbSqlserverCluster:getMdbSqlserverCluster", args, LookupMdbSqlserverClusterResultOutput{}, options).(LookupMdbSqlserverClusterResultOutput), nil
		}).(LookupMdbSqlserverClusterResultOutput)
}

// A collection of arguments for invoking getMdbSqlserverCluster.
type LookupMdbSqlserverClusterOutputArgs struct {
	// The ID of the SQLServer cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// Inhibits deletion of the cluster. Can be either `true` or `false`.
	DeletionProtection pulumi.BoolPtrInput `pulumi:"deletionProtection"`
	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The name of the SQLServer cluster.
	//
	// > Either `clusterId` or `name` should be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringPtrInput `pulumi:"sqlcollation"`
	// SQLServer cluster config.
	SqlserverConfig pulumi.StringMapInput `pulumi:"sqlserverConfig"`
}

func (LookupMdbSqlserverClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbSqlserverClusterArgs)(nil)).Elem()
}

// A collection of values returned by getMdbSqlserverCluster.
type LookupMdbSqlserverClusterResultOutput struct{ *pulumi.OutputState }

func (LookupMdbSqlserverClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbSqlserverClusterResult)(nil)).Elem()
}

func (o LookupMdbSqlserverClusterResultOutput) ToLookupMdbSqlserverClusterResultOutput() LookupMdbSqlserverClusterResultOutput {
	return o
}

func (o LookupMdbSqlserverClusterResultOutput) ToLookupMdbSqlserverClusterResultOutputWithContext(ctx context.Context) LookupMdbSqlserverClusterResultOutput {
	return o
}

func (o LookupMdbSqlserverClusterResultOutput) BackupWindowStarts() GetMdbSqlserverClusterBackupWindowStartArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []GetMdbSqlserverClusterBackupWindowStart {
		return v.BackupWindowStarts
	}).(GetMdbSqlserverClusterBackupWindowStartArrayOutput)
}

func (o LookupMdbSqlserverClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation timestamp of the key.
func (o LookupMdbSqlserverClusterResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A database of the SQLServer cluster. The structure is documented below.
func (o LookupMdbSqlserverClusterResultOutput) Databases() GetMdbSqlserverClusterDatabaseArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []GetMdbSqlserverClusterDatabase { return v.Databases }).(GetMdbSqlserverClusterDatabaseArrayOutput)
}

// Inhibits deletion of the cluster. Can be either `true` or `false`.
func (o LookupMdbSqlserverClusterResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// Description of the SQLServer cluster.
func (o LookupMdbSqlserverClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// Deployment environment of the SQLServer cluster.
func (o LookupMdbSqlserverClusterResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Environment }).(pulumi.StringOutput)
}

func (o LookupMdbSqlserverClusterResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster.
func (o LookupMdbSqlserverClusterResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Health }).(pulumi.StringOutput)
}

// A list of IDs of the host groups hosting VMs of the cluster.
func (o LookupMdbSqlserverClusterResultOutput) HostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []string { return v.HostGroupIds }).(pulumi.StringArrayOutput)
}

// A host of the SQLServer cluster. The structure is documented below.
func (o LookupMdbSqlserverClusterResultOutput) Hosts() GetMdbSqlserverClusterHostArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []GetMdbSqlserverClusterHost { return v.Hosts }).(GetMdbSqlserverClusterHostArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMdbSqlserverClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// A set of key/value label pairs to assign to the SQLServer cluster.
func (o LookupMdbSqlserverClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the database.
func (o LookupMdbSqlserverClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the network, to which the SQLServer cluster belongs.
func (o LookupMdbSqlserverClusterResultOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Resources allocated to hosts of the SQLServer cluster. The structure is documented below.
func (o LookupMdbSqlserverClusterResultOutput) Resources() GetMdbSqlserverClusterResourceArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []GetMdbSqlserverClusterResource { return v.Resources }).(GetMdbSqlserverClusterResourceArrayOutput)
}

// A set of ids of security groups assigned to hosts of the cluster.
func (o LookupMdbSqlserverClusterResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
func (o LookupMdbSqlserverClusterResultOutput) Sqlcollation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Sqlcollation }).(pulumi.StringOutput)
}

// SQLServer cluster config.
func (o LookupMdbSqlserverClusterResultOutput) SqlserverConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) map[string]string { return v.SqlserverConfig }).(pulumi.StringMapOutput)
}

// Status of the cluster.
func (o LookupMdbSqlserverClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// A user of the SQLServer cluster. The structure is documented below.
func (o LookupMdbSqlserverClusterResultOutput) Users() GetMdbSqlserverClusterUserArrayOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) []GetMdbSqlserverClusterUser { return v.Users }).(GetMdbSqlserverClusterUserArrayOutput)
}

// Version of the SQLServer cluster.
func (o LookupMdbSqlserverClusterResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbSqlserverClusterResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbSqlserverClusterResultOutput{})
}
