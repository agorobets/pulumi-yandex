// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/agorobets/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows creation and management of a single binding within IAM policy for an existing Certificate.
//
// > Roles controlled by `CmCertificateIamBinding` should not be assigned using `CmCertificateIamMember`.
//
// > When you delete `CmCertificateIamBinding` resource, the roles can be deleted from other users within the folder as well. Be careful!
//
// ## Example Usage
//
// {{ tffile "examples/cm_certificate_iam_binding/r_cm_certificate_iam_binding_1.tf" }}
//
// ## Import
//
// IAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `certificate_id` and role, e.g.
//
// ```sh
// $ pulumi import yandex:index/cmCertificateIamBinding:CmCertificateIamBinding viewer "certificate_id viewer"
// ```
type CmCertificateIamBinding struct {
	pulumi.CustomResourceState

	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **system:group:federation:{federation_id}:users**: All users in federation.
	// * **system:group:organization:{organization_id}:users**: All users in organization.
	// * **system:allAuthenticatedUsers**: All authenticated users.
	// * **system:allUsers**: All users, including unauthenticated ones.
	//
	// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewCmCertificateIamBinding registers a new resource with the given unique name, arguments, and options.
func NewCmCertificateIamBinding(ctx *pulumi.Context,
	name string, args *CmCertificateIamBindingArgs, opts ...pulumi.ResourceOption) (*CmCertificateIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CmCertificateIamBinding
	err := ctx.RegisterResource("yandex:index/cmCertificateIamBinding:CmCertificateIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCmCertificateIamBinding gets an existing CmCertificateIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCmCertificateIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CmCertificateIamBindingState, opts ...pulumi.ResourceOption) (*CmCertificateIamBinding, error) {
	var resource CmCertificateIamBinding
	err := ctx.ReadResource("yandex:index/cmCertificateIamBinding:CmCertificateIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CmCertificateIamBinding resources.
type cmCertificateIamBindingState struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId *string `pulumi:"certificateId"`
	// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **system:group:federation:{federation_id}:users**: All users in federation.
	// * **system:group:organization:{organization_id}:users**: All users in organization.
	// * **system:allAuthenticatedUsers**: All authenticated users.
	// * **system:allUsers**: All users, including unauthenticated ones.
	//
	// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type CmCertificateIamBindingState struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringPtrInput
	// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **system:group:federation:{federation_id}:users**: All users in federation.
	// * **system:group:organization:{organization_id}:users**: All users in organization.
	// * **system:allAuthenticatedUsers**: All authenticated users.
	// * **system:allUsers**: All users, including unauthenticated ones.
	//
	// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (CmCertificateIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateIamBindingState)(nil)).Elem()
}

type cmCertificateIamBindingArgs struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId string `pulumi:"certificateId"`
	// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **system:group:federation:{federation_id}:users**: All users in federation.
	// * **system:group:organization:{organization_id}:users**: All users in organization.
	// * **system:allAuthenticatedUsers**: All authenticated users.
	// * **system:allUsers**: All users, including unauthenticated ones.
	//
	// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a CmCertificateIamBinding resource.
type CmCertificateIamBindingArgs struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringInput
	// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **system:group:federation:{federation_id}:users**: All users in federation.
	// * **system:group:organization:{organization_id}:users**: All users in organization.
	// * **system:allAuthenticatedUsers**: All authenticated users.
	// * **system:allUsers**: All users, including unauthenticated ones.
	//
	// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (CmCertificateIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateIamBindingArgs)(nil)).Elem()
}

type CmCertificateIamBindingInput interface {
	pulumi.Input

	ToCmCertificateIamBindingOutput() CmCertificateIamBindingOutput
	ToCmCertificateIamBindingOutputWithContext(ctx context.Context) CmCertificateIamBindingOutput
}

func (*CmCertificateIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificateIamBinding)(nil)).Elem()
}

func (i *CmCertificateIamBinding) ToCmCertificateIamBindingOutput() CmCertificateIamBindingOutput {
	return i.ToCmCertificateIamBindingOutputWithContext(context.Background())
}

func (i *CmCertificateIamBinding) ToCmCertificateIamBindingOutputWithContext(ctx context.Context) CmCertificateIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamBindingOutput)
}

// CmCertificateIamBindingArrayInput is an input type that accepts CmCertificateIamBindingArray and CmCertificateIamBindingArrayOutput values.
// You can construct a concrete instance of `CmCertificateIamBindingArrayInput` via:
//
//	CmCertificateIamBindingArray{ CmCertificateIamBindingArgs{...} }
type CmCertificateIamBindingArrayInput interface {
	pulumi.Input

	ToCmCertificateIamBindingArrayOutput() CmCertificateIamBindingArrayOutput
	ToCmCertificateIamBindingArrayOutputWithContext(context.Context) CmCertificateIamBindingArrayOutput
}

type CmCertificateIamBindingArray []CmCertificateIamBindingInput

func (CmCertificateIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificateIamBinding)(nil)).Elem()
}

func (i CmCertificateIamBindingArray) ToCmCertificateIamBindingArrayOutput() CmCertificateIamBindingArrayOutput {
	return i.ToCmCertificateIamBindingArrayOutputWithContext(context.Background())
}

func (i CmCertificateIamBindingArray) ToCmCertificateIamBindingArrayOutputWithContext(ctx context.Context) CmCertificateIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamBindingArrayOutput)
}

// CmCertificateIamBindingMapInput is an input type that accepts CmCertificateIamBindingMap and CmCertificateIamBindingMapOutput values.
// You can construct a concrete instance of `CmCertificateIamBindingMapInput` via:
//
//	CmCertificateIamBindingMap{ "key": CmCertificateIamBindingArgs{...} }
type CmCertificateIamBindingMapInput interface {
	pulumi.Input

	ToCmCertificateIamBindingMapOutput() CmCertificateIamBindingMapOutput
	ToCmCertificateIamBindingMapOutputWithContext(context.Context) CmCertificateIamBindingMapOutput
}

type CmCertificateIamBindingMap map[string]CmCertificateIamBindingInput

func (CmCertificateIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificateIamBinding)(nil)).Elem()
}

func (i CmCertificateIamBindingMap) ToCmCertificateIamBindingMapOutput() CmCertificateIamBindingMapOutput {
	return i.ToCmCertificateIamBindingMapOutputWithContext(context.Background())
}

func (i CmCertificateIamBindingMap) ToCmCertificateIamBindingMapOutputWithContext(ctx context.Context) CmCertificateIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamBindingMapOutput)
}

type CmCertificateIamBindingOutput struct{ *pulumi.OutputState }

func (CmCertificateIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificateIamBinding)(nil)).Elem()
}

func (o CmCertificateIamBindingOutput) ToCmCertificateIamBindingOutput() CmCertificateIamBindingOutput {
	return o
}

func (o CmCertificateIamBindingOutput) ToCmCertificateIamBindingOutputWithContext(ctx context.Context) CmCertificateIamBindingOutput {
	return o
}

// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
func (o CmCertificateIamBindingOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificateIamBinding) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// Identities that will be granted the privilege in `role`. Each entry can have one of the following values:
// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
// * **serviceAccount:{service_account_id}**: A unique service account ID.
// * **system:group:federation:{federation_id}:users**: All users in federation.
// * **system:group:organization:{organization_id}:users**: All users in organization.
// * **system:allAuthenticatedUsers**: All authenticated users.
// * **system:allUsers**: All users, including unauthenticated ones.
//
// Note: for more information about system groups, see the [documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group).
func (o CmCertificateIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CmCertificateIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. See [roles](https://cloud.yandex.com/docs/certificate-manager/security/).
func (o CmCertificateIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificateIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o CmCertificateIamBindingOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CmCertificateIamBinding) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type CmCertificateIamBindingArrayOutput struct{ *pulumi.OutputState }

func (CmCertificateIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificateIamBinding)(nil)).Elem()
}

func (o CmCertificateIamBindingArrayOutput) ToCmCertificateIamBindingArrayOutput() CmCertificateIamBindingArrayOutput {
	return o
}

func (o CmCertificateIamBindingArrayOutput) ToCmCertificateIamBindingArrayOutputWithContext(ctx context.Context) CmCertificateIamBindingArrayOutput {
	return o
}

func (o CmCertificateIamBindingArrayOutput) Index(i pulumi.IntInput) CmCertificateIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CmCertificateIamBinding {
		return vs[0].([]*CmCertificateIamBinding)[vs[1].(int)]
	}).(CmCertificateIamBindingOutput)
}

type CmCertificateIamBindingMapOutput struct{ *pulumi.OutputState }

func (CmCertificateIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificateIamBinding)(nil)).Elem()
}

func (o CmCertificateIamBindingMapOutput) ToCmCertificateIamBindingMapOutput() CmCertificateIamBindingMapOutput {
	return o
}

func (o CmCertificateIamBindingMapOutput) ToCmCertificateIamBindingMapOutputWithContext(ctx context.Context) CmCertificateIamBindingMapOutput {
	return o
}

func (o CmCertificateIamBindingMapOutput) MapIndex(k pulumi.StringInput) CmCertificateIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CmCertificateIamBinding {
		return vs[0].(map[string]*CmCertificateIamBinding)[vs[1].(string)]
	}).(CmCertificateIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamBindingInput)(nil)).Elem(), &CmCertificateIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamBindingArrayInput)(nil)).Elem(), CmCertificateIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamBindingMapInput)(nil)).Elem(), CmCertificateIamBindingMap{})
	pulumi.RegisterOutputType(CmCertificateIamBindingOutput{})
	pulumi.RegisterOutputType(CmCertificateIamBindingArrayOutput{})
	pulumi.RegisterOutputType(CmCertificateIamBindingMapOutput{})
}
