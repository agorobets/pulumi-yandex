// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetMdbClickhouseClusterClickhouseConfigResult
    {
        public readonly bool AsynchronousInsertLogEnabled;
        public readonly int AsynchronousInsertLogRetentionSize;
        public readonly int AsynchronousInsertLogRetentionTime;
        public readonly bool AsynchronousMetricLogEnabled;
        public readonly int AsynchronousMetricLogRetentionSize;
        public readonly int AsynchronousMetricLogRetentionTime;
        public readonly int BackgroundBufferFlushSchedulePoolSize;
        public readonly int BackgroundCommonPoolSize;
        public readonly int BackgroundDistributedSchedulePoolSize;
        public readonly int BackgroundFetchesPoolSize;
        public readonly int BackgroundMergesMutationsConcurrencyRatio;
        public readonly int BackgroundMessageBrokerSchedulePoolSize;
        public readonly int BackgroundMovePoolSize;
        public readonly int BackgroundPoolSize;
        public readonly int BackgroundSchedulePoolSize;
        /// <summary>
        /// Data compression configuration. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult> Compressions;
        public readonly string DefaultDatabase;
        public readonly bool DictionariesLazyLoad;
        public readonly bool GeobaseEnabled;
        public readonly string GeobaseUri;
        /// <summary>
        /// Graphite rollup configuration. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult> GraphiteRollups;
        /// <summary>
        /// Kafka connection configuration. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult Kafka;
        /// <summary>
        /// Kafka topic connection configuration. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult> KafkaTopics;
        public readonly int KeepAliveTimeout;
        /// <summary>
        /// , `max_connections`, `max_concurrent_queries`, `keep_alive_timeout`, `uncompressed_cache_size`, `mark_cache_size`, `max_table_size_to_drop`, `max_partition_size_to_drop`, `timezone`, `geobase_uri`, `query_log_retention_size`, `query_log_retention_time`, `query_thread_log_enabled`, `query_thread_log_retention_size`, `query_thread_log_retention_time`, `part_log_retention_size`, `part_log_retention_time`, `metric_log_enabled`, `metric_log_retention_size`, `metric_log_retention_time`, `trace_log_enabled`, `trace_log_retention_size`, `trace_log_retention_time`, `text_log_enabled`, `text_log_retention_size`, `text_log_retention_time`, `text_log_level`, `background_pool_size`, `background_schedule_pool_size`, `background_fetches_pool_size`, `background_message_broker_schedule_pool_size`, `background_buffer_flush_schedule_pool_size`, `background_move_pool_size`, `background_distributed_schedule_pool_size`, `background_common_pool_size`, `background_merges_mutations_concurrency_ratio`, `default_database`, `total_memory_profiler_step`, `dictionaries_lazy_load`, `opentelemetry_span_log_enabled`, `opentelemetry_span_log_retention_size`, `opentelemetry_span_log_retention_time`, `query_views_log_enabled`, `query_views_log_retention_size`, `query_views_log_retention_time`, `asynchronous_metric_log_enabled`, `asynchronous_metric_log_retention_size`, `asynchronous_metric_log_retention_time`, `session_log_enabled`, `session_log_retention_size`, `session_log_retention_time`, `zookeeper_log_enabled`, `zookeeper_log_retention_size`, `zookeeper_log_retention_time`, `asynchronous_insert_log_enabled`, `asynchronous_insert_log_retention_size`, `asynchronous_insert_log_retention_time` - ClickHouse server parameters. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/settings-list).
        /// </summary>
        public readonly string LogLevel;
        public readonly int MarkCacheSize;
        public readonly int MaxConcurrentQueries;
        public readonly int MaxConnections;
        public readonly int MaxPartitionSizeToDrop;
        public readonly int MaxTableSizeToDrop;
        /// <summary>
        /// MergeTree engine configuration. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult MergeTree;
        public readonly bool MetricLogEnabled;
        public readonly int MetricLogRetentionSize;
        public readonly int MetricLogRetentionTime;
        public readonly bool OpentelemetrySpanLogEnabled;
        public readonly int OpentelemetrySpanLogRetentionSize;
        public readonly int OpentelemetrySpanLogRetentionTime;
        public readonly int PartLogRetentionSize;
        public readonly int PartLogRetentionTime;
        /// <summary>
        /// Query cache configuration. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult QueryCache;
        public readonly int QueryLogRetentionSize;
        public readonly int QueryLogRetentionTime;
        /// <summary>
        /// Query masking rules configuration. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult> QueryMaskingRules;
        public readonly bool QueryThreadLogEnabled;
        public readonly int QueryThreadLogRetentionSize;
        public readonly int QueryThreadLogRetentionTime;
        public readonly bool QueryViewsLogEnabled;
        public readonly int QueryViewsLogRetentionSize;
        public readonly int QueryViewsLogRetentionTime;
        /// <summary>
        /// RabbitMQ connection configuration. The structure is documented below.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult Rabbitmq;
        public readonly bool SessionLogEnabled;
        public readonly int SessionLogRetentionSize;
        public readonly int SessionLogRetentionTime;
        public readonly bool TextLogEnabled;
        public readonly string TextLogLevel;
        public readonly int TextLogRetentionSize;
        public readonly int TextLogRetentionTime;
        public readonly string Timezone;
        public readonly int TotalMemoryProfilerStep;
        public readonly bool TraceLogEnabled;
        public readonly int TraceLogRetentionSize;
        public readonly int TraceLogRetentionTime;
        public readonly int UncompressedCacheSize;
        public readonly bool ZookeeperLogEnabled;
        public readonly int ZookeeperLogRetentionSize;
        public readonly int ZookeeperLogRetentionTime;

        [OutputConstructor]
        private GetMdbClickhouseClusterClickhouseConfigResult(
            bool asynchronousInsertLogEnabled,

            int asynchronousInsertLogRetentionSize,

            int asynchronousInsertLogRetentionTime,

            bool asynchronousMetricLogEnabled,

            int asynchronousMetricLogRetentionSize,

            int asynchronousMetricLogRetentionTime,

            int backgroundBufferFlushSchedulePoolSize,

            int backgroundCommonPoolSize,

            int backgroundDistributedSchedulePoolSize,

            int backgroundFetchesPoolSize,

            int backgroundMergesMutationsConcurrencyRatio,

            int backgroundMessageBrokerSchedulePoolSize,

            int backgroundMovePoolSize,

            int backgroundPoolSize,

            int backgroundSchedulePoolSize,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult> compressions,

            string defaultDatabase,

            bool dictionariesLazyLoad,

            bool geobaseEnabled,

            string geobaseUri,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult> graphiteRollups,

            Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult kafka,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult> kafkaTopics,

            int keepAliveTimeout,

            string logLevel,

            int markCacheSize,

            int maxConcurrentQueries,

            int maxConnections,

            int maxPartitionSizeToDrop,

            int maxTableSizeToDrop,

            Outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult mergeTree,

            bool metricLogEnabled,

            int metricLogRetentionSize,

            int metricLogRetentionTime,

            bool opentelemetrySpanLogEnabled,

            int opentelemetrySpanLogRetentionSize,

            int opentelemetrySpanLogRetentionTime,

            int partLogRetentionSize,

            int partLogRetentionTime,

            Outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult queryCache,

            int queryLogRetentionSize,

            int queryLogRetentionTime,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult> queryMaskingRules,

            bool queryThreadLogEnabled,

            int queryThreadLogRetentionSize,

            int queryThreadLogRetentionTime,

            bool queryViewsLogEnabled,

            int queryViewsLogRetentionSize,

            int queryViewsLogRetentionTime,

            Outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult rabbitmq,

            bool sessionLogEnabled,

            int sessionLogRetentionSize,

            int sessionLogRetentionTime,

            bool textLogEnabled,

            string textLogLevel,

            int textLogRetentionSize,

            int textLogRetentionTime,

            string timezone,

            int totalMemoryProfilerStep,

            bool traceLogEnabled,

            int traceLogRetentionSize,

            int traceLogRetentionTime,

            int uncompressedCacheSize,

            bool zookeeperLogEnabled,

            int zookeeperLogRetentionSize,

            int zookeeperLogRetentionTime)
        {
            AsynchronousInsertLogEnabled = asynchronousInsertLogEnabled;
            AsynchronousInsertLogRetentionSize = asynchronousInsertLogRetentionSize;
            AsynchronousInsertLogRetentionTime = asynchronousInsertLogRetentionTime;
            AsynchronousMetricLogEnabled = asynchronousMetricLogEnabled;
            AsynchronousMetricLogRetentionSize = asynchronousMetricLogRetentionSize;
            AsynchronousMetricLogRetentionTime = asynchronousMetricLogRetentionTime;
            BackgroundBufferFlushSchedulePoolSize = backgroundBufferFlushSchedulePoolSize;
            BackgroundCommonPoolSize = backgroundCommonPoolSize;
            BackgroundDistributedSchedulePoolSize = backgroundDistributedSchedulePoolSize;
            BackgroundFetchesPoolSize = backgroundFetchesPoolSize;
            BackgroundMergesMutationsConcurrencyRatio = backgroundMergesMutationsConcurrencyRatio;
            BackgroundMessageBrokerSchedulePoolSize = backgroundMessageBrokerSchedulePoolSize;
            BackgroundMovePoolSize = backgroundMovePoolSize;
            BackgroundPoolSize = backgroundPoolSize;
            BackgroundSchedulePoolSize = backgroundSchedulePoolSize;
            Compressions = compressions;
            DefaultDatabase = defaultDatabase;
            DictionariesLazyLoad = dictionariesLazyLoad;
            GeobaseEnabled = geobaseEnabled;
            GeobaseUri = geobaseUri;
            GraphiteRollups = graphiteRollups;
            Kafka = kafka;
            KafkaTopics = kafkaTopics;
            KeepAliveTimeout = keepAliveTimeout;
            LogLevel = logLevel;
            MarkCacheSize = markCacheSize;
            MaxConcurrentQueries = maxConcurrentQueries;
            MaxConnections = maxConnections;
            MaxPartitionSizeToDrop = maxPartitionSizeToDrop;
            MaxTableSizeToDrop = maxTableSizeToDrop;
            MergeTree = mergeTree;
            MetricLogEnabled = metricLogEnabled;
            MetricLogRetentionSize = metricLogRetentionSize;
            MetricLogRetentionTime = metricLogRetentionTime;
            OpentelemetrySpanLogEnabled = opentelemetrySpanLogEnabled;
            OpentelemetrySpanLogRetentionSize = opentelemetrySpanLogRetentionSize;
            OpentelemetrySpanLogRetentionTime = opentelemetrySpanLogRetentionTime;
            PartLogRetentionSize = partLogRetentionSize;
            PartLogRetentionTime = partLogRetentionTime;
            QueryCache = queryCache;
            QueryLogRetentionSize = queryLogRetentionSize;
            QueryLogRetentionTime = queryLogRetentionTime;
            QueryMaskingRules = queryMaskingRules;
            QueryThreadLogEnabled = queryThreadLogEnabled;
            QueryThreadLogRetentionSize = queryThreadLogRetentionSize;
            QueryThreadLogRetentionTime = queryThreadLogRetentionTime;
            QueryViewsLogEnabled = queryViewsLogEnabled;
            QueryViewsLogRetentionSize = queryViewsLogRetentionSize;
            QueryViewsLogRetentionTime = queryViewsLogRetentionTime;
            Rabbitmq = rabbitmq;
            SessionLogEnabled = sessionLogEnabled;
            SessionLogRetentionSize = sessionLogRetentionSize;
            SessionLogRetentionTime = sessionLogRetentionTime;
            TextLogEnabled = textLogEnabled;
            TextLogLevel = textLogLevel;
            TextLogRetentionSize = textLogRetentionSize;
            TextLogRetentionTime = textLogRetentionTime;
            Timezone = timezone;
            TotalMemoryProfilerStep = totalMemoryProfilerStep;
            TraceLogEnabled = traceLogEnabled;
            TraceLogRetentionSize = traceLogRetentionSize;
            TraceLogRetentionTime = traceLogRetentionTime;
            UncompressedCacheSize = uncompressedCacheSize;
            ZookeeperLogEnabled = zookeeperLogEnabled;
            ZookeeperLogRetentionSize = zookeeperLogRetentionSize;
            ZookeeperLogRetentionTime = zookeeperLogRetentionTime;
        }
    }
}
