// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Allows management of Yandex Cloud Serverless Containers.
    /// 
    /// ## Example Usage
    /// 
    /// {{ tffile "examples/serverless_container/r_serverless_container_1.tf" }}
    /// 
    /// ### Serverless Container with Image Digest
    /// 
    /// {{ tffile "examples/serverless_container/r_serverless_container_2.tf" }}
    /// 
    /// ### Serverless Container with Mounted Object Storage Bucket
    /// 
    /// {{ tffile "examples/serverless_container/r_serverless_container_3.tf" }}
    /// </summary>
    [YandexResourceType("yandex:index/serverlessContainer:ServerlessContainer")]
    public partial class ServerlessContainer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Concurrency of Yandex Cloud Serverless Container
        /// </summary>
        [Output("concurrency")]
        public Output<int> Concurrency { get; private set; } = null!;

        /// <summary>
        /// Network access. If specified the revision will be attached to specified network
        /// * `connectivity.0.network_id` - Network the revision will have access to
        /// </summary>
        [Output("connectivity")]
        public Output<Outputs.ServerlessContainerConnectivity?> Connectivity { get; private set; } = null!;

        /// <summary>
        /// Core fraction (**0...100**) of the Yandex Cloud Serverless Container
        /// </summary>
        [Output("coreFraction")]
        public Output<int> CoreFraction { get; private set; } = null!;

        [Output("cores")]
        public Output<int?> Cores { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp of the Yandex Cloud Serverless Container
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the Yandex Cloud Serverless Container
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container
        /// </summary>
        [Output("executionTimeout")]
        public Output<string> ExecutionTimeout { get; private set; } = null!;

        /// <summary>
        /// Folder ID for the Yandex Cloud Serverless Container
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Revision deployment image for Yandex Cloud Serverless Container
        /// * `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container
        /// * `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container
        /// * `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container. If presented, should be equal to digest that will be resolved at server side by URL. Container will be updated on digest change even if `image.0.url` stays the same. If field not specified then its value will be computed.
        /// * `image.0.command` - List of commands for Yandex Cloud Serverless Container
        /// * `image.0.args` - List of arguments for Yandex Cloud Serverless Container
        /// * `image.0.environment` - A set of key/value environment variable pairs for Yandex Cloud Serverless Container. Each key must begin with a letter (A-Z, a-z).
        /// </summary>
        [Output("image")]
        public Output<Outputs.ServerlessContainerImage> Image { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs to assign to the Yandex Cloud Serverless Container
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Options for logging from Yandex Cloud Serverless Container
        /// </summary>
        [Output("logOptions")]
        public Output<Outputs.ServerlessContainerLogOptions?> LogOptions { get; private set; } = null!;

        /// <summary>
        /// Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// Mounts for Yandex Cloud Serverless Container
        /// * `mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the target is mounted
        /// * `mounts.0.mode` - Mountâ€™s accessibility mode. Valid values are `ro` and `rw`
        /// * `mounts.0.ephemeral_disk` - One of the available mount types. Disk available during the function execution time
        /// * `mounts.0.ephemeral_disk.0.size_gb` - (Required) Size of the ephemeral disk in GB
        /// * `mounts.0.ephemeral_disk.0.block_size_kb` - Optional block size of the ephemeral disk in KB
        /// * `mounts.0.object_storage` - One of the available mount types. Object storage as a mount
        /// * `mounts.0.object_storage.0.bucket` - (Required) Name of the mounting bucket
        /// * `mounts.0.object_storage.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// </summary>
        [Output("mounts")]
        public Output<ImmutableArray<Outputs.ServerlessContainerMount>> Mounts { get; private set; } = null!;

        /// <summary>
        /// Yandex Cloud Serverless Container name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provision policy. If specified the revision will have prepared instances
        /// * `provision_policy.0.min_instances` - Minimum number of prepared instances that are always ready to serve requests
        /// </summary>
        [Output("provisionPolicy")]
        public Output<Outputs.ServerlessContainerProvisionPolicy?> ProvisionPolicy { get; private set; } = null!;

        /// <summary>
        /// Last revision ID of the Yandex Cloud Serverless Container
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// Runtime for Yandex Cloud Serverless Container
        /// * `runtime.0.type` - Type of the runtime for Yandex Cloud Serverless Container. Valid values are `http` and `task`
        /// </summary>
        [Output("runtime")]
        public Output<Outputs.ServerlessContainerRuntime> Runtime { get; private set; } = null!;

        /// <summary>
        /// Secrets for Yandex Cloud Serverless Container
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.ServerlessContainerSecret>> Secrets { get; private set; } = null!;

        /// <summary>
        /// Service account ID for Yandex Cloud Serverless Container
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string?> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// Storage mounts for Yandex Cloud Serverless Container
        /// * `storage_mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the bucket is mounted
        /// * `storage_mounts.0.bucket` - (Required) Name of the mounting bucket
        /// * `storage_mounts.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// * `storage_mounts.0.read_only` - Mount the bucket in read-only mode
        /// </summary>
        [Output("storageMounts")]
        public Output<ImmutableArray<Outputs.ServerlessContainerStorageMount>> StorageMounts { get; private set; } = null!;

        /// <summary>
        /// Invoke URL for the Yandex Cloud Serverless Container
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ServerlessContainer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerlessContainer(string name, ServerlessContainerArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/serverlessContainer:ServerlessContainer", name, args ?? new ServerlessContainerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerlessContainer(string name, Input<string> id, ServerlessContainerState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/serverlessContainer:ServerlessContainer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/agorobets/pulumi-yandex/releases",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerlessContainer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerlessContainer Get(string name, Input<string> id, ServerlessContainerState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerlessContainer(name, id, state, options);
        }
    }

    public sealed class ServerlessContainerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Concurrency of Yandex Cloud Serverless Container
        /// </summary>
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        /// <summary>
        /// Network access. If specified the revision will be attached to specified network
        /// * `connectivity.0.network_id` - Network the revision will have access to
        /// </summary>
        [Input("connectivity")]
        public Input<Inputs.ServerlessContainerConnectivityArgs>? Connectivity { get; set; }

        /// <summary>
        /// Core fraction (**0...100**) of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("coreFraction")]
        public Input<int>? CoreFraction { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        /// <summary>
        /// Description of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container
        /// </summary>
        [Input("executionTimeout")]
        public Input<string>? ExecutionTimeout { get; set; }

        /// <summary>
        /// Folder ID for the Yandex Cloud Serverless Container
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Revision deployment image for Yandex Cloud Serverless Container
        /// * `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container
        /// * `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container
        /// * `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container. If presented, should be equal to digest that will be resolved at server side by URL. Container will be updated on digest change even if `image.0.url` stays the same. If field not specified then its value will be computed.
        /// * `image.0.command` - List of commands for Yandex Cloud Serverless Container
        /// * `image.0.args` - List of arguments for Yandex Cloud Serverless Container
        /// * `image.0.environment` - A set of key/value environment variable pairs for Yandex Cloud Serverless Container. Each key must begin with a letter (A-Z, a-z).
        /// </summary>
        [Input("image", required: true)]
        public Input<Inputs.ServerlessContainerImageArgs> Image { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the Yandex Cloud Serverless Container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Options for logging from Yandex Cloud Serverless Container
        /// </summary>
        [Input("logOptions")]
        public Input<Inputs.ServerlessContainerLogOptionsArgs>? LogOptions { get; set; }

        /// <summary>
        /// Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container
        /// </summary>
        [Input("memory", required: true)]
        public Input<int> Memory { get; set; } = null!;

        [Input("mounts")]
        private InputList<Inputs.ServerlessContainerMountArgs>? _mounts;

        /// <summary>
        /// Mounts for Yandex Cloud Serverless Container
        /// * `mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the target is mounted
        /// * `mounts.0.mode` - Mountâ€™s accessibility mode. Valid values are `ro` and `rw`
        /// * `mounts.0.ephemeral_disk` - One of the available mount types. Disk available during the function execution time
        /// * `mounts.0.ephemeral_disk.0.size_gb` - (Required) Size of the ephemeral disk in GB
        /// * `mounts.0.ephemeral_disk.0.block_size_kb` - Optional block size of the ephemeral disk in KB
        /// * `mounts.0.object_storage` - One of the available mount types. Object storage as a mount
        /// * `mounts.0.object_storage.0.bucket` - (Required) Name of the mounting bucket
        /// * `mounts.0.object_storage.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// </summary>
        public InputList<Inputs.ServerlessContainerMountArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.ServerlessContainerMountArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// Yandex Cloud Serverless Container name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Provision policy. If specified the revision will have prepared instances
        /// * `provision_policy.0.min_instances` - Minimum number of prepared instances that are always ready to serve requests
        /// </summary>
        [Input("provisionPolicy")]
        public Input<Inputs.ServerlessContainerProvisionPolicyArgs>? ProvisionPolicy { get; set; }

        /// <summary>
        /// Runtime for Yandex Cloud Serverless Container
        /// * `runtime.0.type` - Type of the runtime for Yandex Cloud Serverless Container. Valid values are `http` and `task`
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.ServerlessContainerRuntimeArgs>? Runtime { get; set; }

        [Input("secrets")]
        private InputList<Inputs.ServerlessContainerSecretArgs>? _secrets;

        /// <summary>
        /// Secrets for Yandex Cloud Serverless Container
        /// </summary>
        public InputList<Inputs.ServerlessContainerSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.ServerlessContainerSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Service account ID for Yandex Cloud Serverless Container
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("storageMounts")]
        private InputList<Inputs.ServerlessContainerStorageMountArgs>? _storageMounts;

        /// <summary>
        /// Storage mounts for Yandex Cloud Serverless Container
        /// * `storage_mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the bucket is mounted
        /// * `storage_mounts.0.bucket` - (Required) Name of the mounting bucket
        /// * `storage_mounts.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// * `storage_mounts.0.read_only` - Mount the bucket in read-only mode
        /// </summary>
        [Obsolete(@"The 'storage_mounts' field has been deprecated. Please use 'mounts' instead.")]
        public InputList<Inputs.ServerlessContainerStorageMountArgs> StorageMounts
        {
            get => _storageMounts ?? (_storageMounts = new InputList<Inputs.ServerlessContainerStorageMountArgs>());
            set => _storageMounts = value;
        }

        public ServerlessContainerArgs()
        {
        }
        public static new ServerlessContainerArgs Empty => new ServerlessContainerArgs();
    }

    public sealed class ServerlessContainerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Concurrency of Yandex Cloud Serverless Container
        /// </summary>
        [Input("concurrency")]
        public Input<int>? Concurrency { get; set; }

        /// <summary>
        /// Network access. If specified the revision will be attached to specified network
        /// * `connectivity.0.network_id` - Network the revision will have access to
        /// </summary>
        [Input("connectivity")]
        public Input<Inputs.ServerlessContainerConnectivityGetArgs>? Connectivity { get; set; }

        /// <summary>
        /// Core fraction (**0...100**) of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("coreFraction")]
        public Input<int>? CoreFraction { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        /// <summary>
        /// Creation timestamp of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container
        /// </summary>
        [Input("executionTimeout")]
        public Input<string>? ExecutionTimeout { get; set; }

        /// <summary>
        /// Folder ID for the Yandex Cloud Serverless Container
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Revision deployment image for Yandex Cloud Serverless Container
        /// * `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container
        /// * `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container
        /// * `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container. If presented, should be equal to digest that will be resolved at server side by URL. Container will be updated on digest change even if `image.0.url` stays the same. If field not specified then its value will be computed.
        /// * `image.0.command` - List of commands for Yandex Cloud Serverless Container
        /// * `image.0.args` - List of arguments for Yandex Cloud Serverless Container
        /// * `image.0.environment` - A set of key/value environment variable pairs for Yandex Cloud Serverless Container. Each key must begin with a letter (A-Z, a-z).
        /// </summary>
        [Input("image")]
        public Input<Inputs.ServerlessContainerImageGetArgs>? Image { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs to assign to the Yandex Cloud Serverless Container
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Options for logging from Yandex Cloud Serverless Container
        /// </summary>
        [Input("logOptions")]
        public Input<Inputs.ServerlessContainerLogOptionsGetArgs>? LogOptions { get; set; }

        /// <summary>
        /// Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("mounts")]
        private InputList<Inputs.ServerlessContainerMountGetArgs>? _mounts;

        /// <summary>
        /// Mounts for Yandex Cloud Serverless Container
        /// * `mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the target is mounted
        /// * `mounts.0.mode` - Mountâ€™s accessibility mode. Valid values are `ro` and `rw`
        /// * `mounts.0.ephemeral_disk` - One of the available mount types. Disk available during the function execution time
        /// * `mounts.0.ephemeral_disk.0.size_gb` - (Required) Size of the ephemeral disk in GB
        /// * `mounts.0.ephemeral_disk.0.block_size_kb` - Optional block size of the ephemeral disk in KB
        /// * `mounts.0.object_storage` - One of the available mount types. Object storage as a mount
        /// * `mounts.0.object_storage.0.bucket` - (Required) Name of the mounting bucket
        /// * `mounts.0.object_storage.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// </summary>
        public InputList<Inputs.ServerlessContainerMountGetArgs> Mounts
        {
            get => _mounts ?? (_mounts = new InputList<Inputs.ServerlessContainerMountGetArgs>());
            set => _mounts = value;
        }

        /// <summary>
        /// Yandex Cloud Serverless Container name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Provision policy. If specified the revision will have prepared instances
        /// * `provision_policy.0.min_instances` - Minimum number of prepared instances that are always ready to serve requests
        /// </summary>
        [Input("provisionPolicy")]
        public Input<Inputs.ServerlessContainerProvisionPolicyGetArgs>? ProvisionPolicy { get; set; }

        /// <summary>
        /// Last revision ID of the Yandex Cloud Serverless Container
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        /// <summary>
        /// Runtime for Yandex Cloud Serverless Container
        /// * `runtime.0.type` - Type of the runtime for Yandex Cloud Serverless Container. Valid values are `http` and `task`
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.ServerlessContainerRuntimeGetArgs>? Runtime { get; set; }

        [Input("secrets")]
        private InputList<Inputs.ServerlessContainerSecretGetArgs>? _secrets;

        /// <summary>
        /// Secrets for Yandex Cloud Serverless Container
        /// </summary>
        public InputList<Inputs.ServerlessContainerSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.ServerlessContainerSecretGetArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Service account ID for Yandex Cloud Serverless Container
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("storageMounts")]
        private InputList<Inputs.ServerlessContainerStorageMountGetArgs>? _storageMounts;

        /// <summary>
        /// Storage mounts for Yandex Cloud Serverless Container
        /// * `storage_mounts.0.mount_point_path` - (Required) Path inside the container to access the directory in which the bucket is mounted
        /// * `storage_mounts.0.bucket` - (Required) Name of the mounting bucket
        /// * `storage_mounts.0.prefix` - Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted
        /// * `storage_mounts.0.read_only` - Mount the bucket in read-only mode
        /// </summary>
        [Obsolete(@"The 'storage_mounts' field has been deprecated. Please use 'mounts' instead.")]
        public InputList<Inputs.ServerlessContainerStorageMountGetArgs> StorageMounts
        {
            get => _storageMounts ?? (_storageMounts = new InputList<Inputs.ServerlessContainerStorageMountGetArgs>());
            set => _storageMounts = value;
        }

        /// <summary>
        /// Invoke URL for the Yandex Cloud Serverless Container
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ServerlessContainerState()
        {
        }
        public static new ServerlessContainerState Empty => new ServerlessContainerState();
    }
}
