// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbRedisCluster
    {
        /// <summary>
        /// Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-redis/concepts).
        /// 
        /// ## Example Usage
        /// 
        /// {{ tffile "examples/mdb_redis_cluster/d_mdb_redis_cluster_1.tf" }}
        /// </summary>
        public static Task<GetMdbRedisClusterResult> InvokeAsync(GetMdbRedisClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbRedisClusterResult>("yandex:index/getMdbRedisCluster:getMdbRedisCluster", args ?? new GetMdbRedisClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-redis/concepts).
        /// 
        /// ## Example Usage
        /// 
        /// {{ tffile "examples/mdb_redis_cluster/d_mdb_redis_cluster_1.tf" }}
        /// </summary>
        public static Output<GetMdbRedisClusterResult> Invoke(GetMdbRedisClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbRedisClusterResult>("yandex:index/getMdbRedisCluster:getMdbRedisCluster", args ?? new GetMdbRedisClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Yandex Managed Redis cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-redis/concepts).
        /// 
        /// ## Example Usage
        /// 
        /// {{ tffile "examples/mdb_redis_cluster/d_mdb_redis_cluster_1.tf" }}
        /// </summary>
        public static Output<GetMdbRedisClusterResult> Invoke(GetMdbRedisClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbRedisClusterResult>("yandex:index/getMdbRedisCluster:getMdbRedisCluster", args ?? new GetMdbRedisClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbRedisClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Redis cluster.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        [Input("deletionProtection")]
        public bool? DeletionProtection { get; set; }

        /// <summary>
        /// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        /// <summary>
        /// The name of the Redis cluster.
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetMdbRedisClusterArgs()
        {
        }
        public static new GetMdbRedisClusterArgs Empty => new GetMdbRedisClusterArgs();
    }

    public sealed class GetMdbRedisClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Redis cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// The name of the Redis cluster.
        /// 
        /// &gt; Either `cluster_id` or `name` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetMdbRedisClusterInvokeArgs()
        {
        }
        public static new GetMdbRedisClusterInvokeArgs Empty => new GetMdbRedisClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbRedisClusterResult
    {
        /// <summary>
        /// Announce fqdn instead of ip address.
        /// </summary>
        public readonly bool AnnounceHostnames;
        public readonly string ClusterId;
        /// <summary>
        /// Configuration of the Redis cluster. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbRedisClusterConfigResult> Configs;
        /// <summary>
        /// Creation timestamp of the key.
        /// </summary>
        public readonly string CreatedAt;
        public readonly bool DeletionProtection;
        /// <summary>
        /// Description of the Redis cluster.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetMdbRedisClusterDiskSizeAutoscalingResult> DiskSizeAutoscalings;
        /// <summary>
        /// Deployment environment of the Redis cluster.
        /// </summary>
        public readonly string Environment;
        public readonly string FolderId;
        /// <summary>
        /// Aggregated health of the cluster.
        /// </summary>
        public readonly string Health;
        /// <summary>
        /// A host of the Redis cluster. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbRedisClusterHostResult> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of key/value label pairs to assign to the Redis cluster.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetMdbRedisClusterMaintenanceWindowResult> MaintenanceWindows;
        public readonly string Name;
        /// <summary>
        /// ID of the network, to which the Redis cluster belongs.
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// Persistence mode. Possible values: `ON`, `OFF`.
        /// </summary>
        public readonly string PersistenceMode;
        /// <summary>
        /// Resources allocated to hosts of the Redis cluster. The structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbRedisClusterResourceResult> Resources;
        /// <summary>
        /// A set of ids of security groups assigned to hosts of the cluster.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Redis Cluster mode enabled/disabled.
        /// </summary>
        public readonly bool Sharded;
        /// <summary>
        /// Status of the cluster.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// TLS support mode enabled/disabled.
        /// </summary>
        public readonly bool TlsEnabled;

        [OutputConstructor]
        private GetMdbRedisClusterResult(
            bool announceHostnames,

            string clusterId,

            ImmutableArray<Outputs.GetMdbRedisClusterConfigResult> configs,

            string createdAt,

            bool deletionProtection,

            string description,

            ImmutableArray<Outputs.GetMdbRedisClusterDiskSizeAutoscalingResult> diskSizeAutoscalings,

            string environment,

            string folderId,

            string health,

            ImmutableArray<Outputs.GetMdbRedisClusterHostResult> hosts,

            string id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetMdbRedisClusterMaintenanceWindowResult> maintenanceWindows,

            string name,

            string networkId,

            string persistenceMode,

            ImmutableArray<Outputs.GetMdbRedisClusterResourceResult> resources,

            ImmutableArray<string> securityGroupIds,

            bool sharded,

            string status,

            bool tlsEnabled)
        {
            AnnounceHostnames = announceHostnames;
            ClusterId = clusterId;
            Configs = configs;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            Description = description;
            DiskSizeAutoscalings = diskSizeAutoscalings;
            Environment = environment;
            FolderId = folderId;
            Health = health;
            Hosts = hosts;
            Id = id;
            Labels = labels;
            MaintenanceWindows = maintenanceWindows;
            Name = name;
            NetworkId = networkId;
            PersistenceMode = persistenceMode;
            Resources = resources;
            SecurityGroupIds = securityGroupIds;
            Sharded = sharded;
            Status = status;
            TlsEnabled = tlsEnabled;
        }
    }
}
