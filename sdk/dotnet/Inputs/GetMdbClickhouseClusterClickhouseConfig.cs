// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("asynchronousInsertLogEnabled", required: true)]
        public bool AsynchronousInsertLogEnabled { get; set; }

        [Input("asynchronousInsertLogRetentionSize", required: true)]
        public int AsynchronousInsertLogRetentionSize { get; set; }

        [Input("asynchronousInsertLogRetentionTime", required: true)]
        public int AsynchronousInsertLogRetentionTime { get; set; }

        [Input("asynchronousMetricLogEnabled", required: true)]
        public bool AsynchronousMetricLogEnabled { get; set; }

        [Input("asynchronousMetricLogRetentionSize", required: true)]
        public int AsynchronousMetricLogRetentionSize { get; set; }

        [Input("asynchronousMetricLogRetentionTime", required: true)]
        public int AsynchronousMetricLogRetentionTime { get; set; }

        [Input("backgroundBufferFlushSchedulePoolSize", required: true)]
        public int BackgroundBufferFlushSchedulePoolSize { get; set; }

        [Input("backgroundCommonPoolSize", required: true)]
        public int BackgroundCommonPoolSize { get; set; }

        [Input("backgroundDistributedSchedulePoolSize", required: true)]
        public int BackgroundDistributedSchedulePoolSize { get; set; }

        [Input("backgroundFetchesPoolSize", required: true)]
        public int BackgroundFetchesPoolSize { get; set; }

        [Input("backgroundMergesMutationsConcurrencyRatio", required: true)]
        public int BackgroundMergesMutationsConcurrencyRatio { get; set; }

        [Input("backgroundMessageBrokerSchedulePoolSize", required: true)]
        public int BackgroundMessageBrokerSchedulePoolSize { get; set; }

        [Input("backgroundMovePoolSize", required: true)]
        public int BackgroundMovePoolSize { get; set; }

        [Input("backgroundPoolSize", required: true)]
        public int BackgroundPoolSize { get; set; }

        [Input("backgroundSchedulePoolSize", required: true)]
        public int BackgroundSchedulePoolSize { get; set; }

        [Input("compressions")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs>? _compressions;

        /// <summary>
        /// Data compression configuration. The structure is documented below.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs> Compressions
        {
            get => _compressions ?? (_compressions = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs>());
            set => _compressions = value;
        }

        [Input("defaultDatabase", required: true)]
        public string DefaultDatabase { get; set; } = null!;

        [Input("dictionariesLazyLoad", required: true)]
        public bool DictionariesLazyLoad { get; set; }

        [Input("geobaseEnabled", required: true)]
        public bool GeobaseEnabled { get; set; }

        [Input("geobaseUri", required: true)]
        public string GeobaseUri { get; set; } = null!;

        [Input("graphiteRollups")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs>? _graphiteRollups;

        /// <summary>
        /// Graphite rollup configuration. The structure is documented below.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs> GraphiteRollups
        {
            get => _graphiteRollups ?? (_graphiteRollups = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs>());
            set => _graphiteRollups = value;
        }

        /// <summary>
        /// Kafka connection configuration. The structure is documented below.
        /// </summary>
        [Input("kafka", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaArgs Kafka { get; set; } = null!;

        [Input("kafkaTopics")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs>? _kafkaTopics;

        /// <summary>
        /// Kafka topic connection configuration. The structure is documented below.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs> KafkaTopics
        {
            get => _kafkaTopics ?? (_kafkaTopics = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs>());
            set => _kafkaTopics = value;
        }

        [Input("keepAliveTimeout", required: true)]
        public int KeepAliveTimeout { get; set; }

        /// <summary>
        /// , `max_connections`, `max_concurrent_queries`, `keep_alive_timeout`, `uncompressed_cache_size`, `mark_cache_size`, `max_table_size_to_drop`, `max_partition_size_to_drop`, `timezone`, `geobase_uri`, `query_log_retention_size`, `query_log_retention_time`, `query_thread_log_enabled`, `query_thread_log_retention_size`, `query_thread_log_retention_time`, `part_log_retention_size`, `part_log_retention_time`, `metric_log_enabled`, `metric_log_retention_size`, `metric_log_retention_time`, `trace_log_enabled`, `trace_log_retention_size`, `trace_log_retention_time`, `text_log_enabled`, `text_log_retention_size`, `text_log_retention_time`, `text_log_level`, `background_pool_size`, `background_schedule_pool_size`, `background_fetches_pool_size`, `background_message_broker_schedule_pool_size`, `background_buffer_flush_schedule_pool_size`, `background_move_pool_size`, `background_distributed_schedule_pool_size`, `background_common_pool_size`, `background_merges_mutations_concurrency_ratio`, `default_database`, `total_memory_profiler_step`, `dictionaries_lazy_load`, `opentelemetry_span_log_enabled`, `opentelemetry_span_log_retention_size`, `opentelemetry_span_log_retention_time`, `query_views_log_enabled`, `query_views_log_retention_size`, `query_views_log_retention_time`, `asynchronous_metric_log_enabled`, `asynchronous_metric_log_retention_size`, `asynchronous_metric_log_retention_time`, `session_log_enabled`, `session_log_retention_size`, `session_log_retention_time`, `zookeeper_log_enabled`, `zookeeper_log_retention_size`, `zookeeper_log_retention_time`, `asynchronous_insert_log_enabled`, `asynchronous_insert_log_retention_size`, `asynchronous_insert_log_retention_time` - ClickHouse server parameters. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/settings-list).
        /// </summary>
        [Input("logLevel", required: true)]
        public string LogLevel { get; set; } = null!;

        [Input("markCacheSize", required: true)]
        public int MarkCacheSize { get; set; }

        [Input("maxConcurrentQueries", required: true)]
        public int MaxConcurrentQueries { get; set; }

        [Input("maxConnections", required: true)]
        public int MaxConnections { get; set; }

        [Input("maxPartitionSizeToDrop", required: true)]
        public int MaxPartitionSizeToDrop { get; set; }

        [Input("maxTableSizeToDrop", required: true)]
        public int MaxTableSizeToDrop { get; set; }

        /// <summary>
        /// MergeTree engine configuration. The structure is documented below.
        /// </summary>
        [Input("mergeTree", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeArgs MergeTree { get; set; } = null!;

        [Input("metricLogEnabled", required: true)]
        public bool MetricLogEnabled { get; set; }

        [Input("metricLogRetentionSize", required: true)]
        public int MetricLogRetentionSize { get; set; }

        [Input("metricLogRetentionTime", required: true)]
        public int MetricLogRetentionTime { get; set; }

        [Input("opentelemetrySpanLogEnabled", required: true)]
        public bool OpentelemetrySpanLogEnabled { get; set; }

        [Input("opentelemetrySpanLogRetentionSize", required: true)]
        public int OpentelemetrySpanLogRetentionSize { get; set; }

        [Input("opentelemetrySpanLogRetentionTime", required: true)]
        public int OpentelemetrySpanLogRetentionTime { get; set; }

        [Input("partLogRetentionSize", required: true)]
        public int PartLogRetentionSize { get; set; }

        [Input("partLogRetentionTime", required: true)]
        public int PartLogRetentionTime { get; set; }

        /// <summary>
        /// Query cache configuration. The structure is documented below.
        /// </summary>
        [Input("queryCache", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheArgs QueryCache { get; set; } = null!;

        [Input("queryLogRetentionSize", required: true)]
        public int QueryLogRetentionSize { get; set; }

        [Input("queryLogRetentionTime", required: true)]
        public int QueryLogRetentionTime { get; set; }

        [Input("queryMaskingRules")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs>? _queryMaskingRules;

        /// <summary>
        /// Query masking rules configuration. The structure is documented below.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs> QueryMaskingRules
        {
            get => _queryMaskingRules ?? (_queryMaskingRules = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs>());
            set => _queryMaskingRules = value;
        }

        [Input("queryThreadLogEnabled", required: true)]
        public bool QueryThreadLogEnabled { get; set; }

        [Input("queryThreadLogRetentionSize", required: true)]
        public int QueryThreadLogRetentionSize { get; set; }

        [Input("queryThreadLogRetentionTime", required: true)]
        public int QueryThreadLogRetentionTime { get; set; }

        [Input("queryViewsLogEnabled", required: true)]
        public bool QueryViewsLogEnabled { get; set; }

        [Input("queryViewsLogRetentionSize", required: true)]
        public int QueryViewsLogRetentionSize { get; set; }

        [Input("queryViewsLogRetentionTime", required: true)]
        public int QueryViewsLogRetentionTime { get; set; }

        /// <summary>
        /// RabbitMQ connection configuration. The structure is documented below.
        /// </summary>
        [Input("rabbitmq", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqArgs Rabbitmq { get; set; } = null!;

        [Input("sessionLogEnabled", required: true)]
        public bool SessionLogEnabled { get; set; }

        [Input("sessionLogRetentionSize", required: true)]
        public int SessionLogRetentionSize { get; set; }

        [Input("sessionLogRetentionTime", required: true)]
        public int SessionLogRetentionTime { get; set; }

        [Input("textLogEnabled", required: true)]
        public bool TextLogEnabled { get; set; }

        [Input("textLogLevel", required: true)]
        public string TextLogLevel { get; set; } = null!;

        [Input("textLogRetentionSize", required: true)]
        public int TextLogRetentionSize { get; set; }

        [Input("textLogRetentionTime", required: true)]
        public int TextLogRetentionTime { get; set; }

        [Input("timezone", required: true)]
        public string Timezone { get; set; } = null!;

        [Input("totalMemoryProfilerStep", required: true)]
        public int TotalMemoryProfilerStep { get; set; }

        [Input("traceLogEnabled", required: true)]
        public bool TraceLogEnabled { get; set; }

        [Input("traceLogRetentionSize", required: true)]
        public int TraceLogRetentionSize { get; set; }

        [Input("traceLogRetentionTime", required: true)]
        public int TraceLogRetentionTime { get; set; }

        [Input("uncompressedCacheSize", required: true)]
        public int UncompressedCacheSize { get; set; }

        [Input("zookeeperLogEnabled", required: true)]
        public bool ZookeeperLogEnabled { get; set; }

        [Input("zookeeperLogRetentionSize", required: true)]
        public int ZookeeperLogRetentionSize { get; set; }

        [Input("zookeeperLogRetentionTime", required: true)]
        public int ZookeeperLogRetentionTime { get; set; }

        public GetMdbClickhouseClusterClickhouseConfigArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigArgs Empty => new GetMdbClickhouseClusterClickhouseConfigArgs();
    }
}
