// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("asynchronousInsertLogEnabled", required: true)]
        public Input<bool> AsynchronousInsertLogEnabled { get; set; } = null!;

        [Input("asynchronousInsertLogRetentionSize", required: true)]
        public Input<int> AsynchronousInsertLogRetentionSize { get; set; } = null!;

        [Input("asynchronousInsertLogRetentionTime", required: true)]
        public Input<int> AsynchronousInsertLogRetentionTime { get; set; } = null!;

        [Input("asynchronousMetricLogEnabled", required: true)]
        public Input<bool> AsynchronousMetricLogEnabled { get; set; } = null!;

        [Input("asynchronousMetricLogRetentionSize", required: true)]
        public Input<int> AsynchronousMetricLogRetentionSize { get; set; } = null!;

        [Input("asynchronousMetricLogRetentionTime", required: true)]
        public Input<int> AsynchronousMetricLogRetentionTime { get; set; } = null!;

        [Input("backgroundBufferFlushSchedulePoolSize", required: true)]
        public Input<int> BackgroundBufferFlushSchedulePoolSize { get; set; } = null!;

        [Input("backgroundCommonPoolSize", required: true)]
        public Input<int> BackgroundCommonPoolSize { get; set; } = null!;

        [Input("backgroundDistributedSchedulePoolSize", required: true)]
        public Input<int> BackgroundDistributedSchedulePoolSize { get; set; } = null!;

        [Input("backgroundFetchesPoolSize", required: true)]
        public Input<int> BackgroundFetchesPoolSize { get; set; } = null!;

        [Input("backgroundMergesMutationsConcurrencyRatio", required: true)]
        public Input<int> BackgroundMergesMutationsConcurrencyRatio { get; set; } = null!;

        [Input("backgroundMessageBrokerSchedulePoolSize", required: true)]
        public Input<int> BackgroundMessageBrokerSchedulePoolSize { get; set; } = null!;

        [Input("backgroundMovePoolSize", required: true)]
        public Input<int> BackgroundMovePoolSize { get; set; } = null!;

        [Input("backgroundPoolSize", required: true)]
        public Input<int> BackgroundPoolSize { get; set; } = null!;

        [Input("backgroundSchedulePoolSize", required: true)]
        public Input<int> BackgroundSchedulePoolSize { get; set; } = null!;

        [Input("compressions")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs>? _compressions;

        /// <summary>
        /// Data compression configuration. The structure is documented below.
        /// </summary>
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs> Compressions
        {
            get => _compressions ?? (_compressions = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs>());
            set => _compressions = value;
        }

        [Input("defaultDatabase", required: true)]
        public Input<string> DefaultDatabase { get; set; } = null!;

        [Input("dictionariesLazyLoad", required: true)]
        public Input<bool> DictionariesLazyLoad { get; set; } = null!;

        [Input("geobaseEnabled", required: true)]
        public Input<bool> GeobaseEnabled { get; set; } = null!;

        [Input("geobaseUri", required: true)]
        public Input<string> GeobaseUri { get; set; } = null!;

        [Input("graphiteRollups")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs>? _graphiteRollups;

        /// <summary>
        /// Graphite rollup configuration. The structure is documented below.
        /// </summary>
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs> GraphiteRollups
        {
            get => _graphiteRollups ?? (_graphiteRollups = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs>());
            set => _graphiteRollups = value;
        }

        /// <summary>
        /// Kafka connection configuration. The structure is documented below.
        /// </summary>
        [Input("kafka", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaInputArgs> Kafka { get; set; } = null!;

        [Input("kafkaTopics")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs>? _kafkaTopics;

        /// <summary>
        /// Kafka topic connection configuration. The structure is documented below.
        /// </summary>
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs> KafkaTopics
        {
            get => _kafkaTopics ?? (_kafkaTopics = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs>());
            set => _kafkaTopics = value;
        }

        [Input("keepAliveTimeout", required: true)]
        public Input<int> KeepAliveTimeout { get; set; } = null!;

        /// <summary>
        /// , `max_connections`, `max_concurrent_queries`, `keep_alive_timeout`, `uncompressed_cache_size`, `mark_cache_size`, `max_table_size_to_drop`, `max_partition_size_to_drop`, `timezone`, `geobase_uri`, `query_log_retention_size`, `query_log_retention_time`, `query_thread_log_enabled`, `query_thread_log_retention_size`, `query_thread_log_retention_time`, `part_log_retention_size`, `part_log_retention_time`, `metric_log_enabled`, `metric_log_retention_size`, `metric_log_retention_time`, `trace_log_enabled`, `trace_log_retention_size`, `trace_log_retention_time`, `text_log_enabled`, `text_log_retention_size`, `text_log_retention_time`, `text_log_level`, `background_pool_size`, `background_schedule_pool_size`, `background_fetches_pool_size`, `background_message_broker_schedule_pool_size`, `background_buffer_flush_schedule_pool_size`, `background_move_pool_size`, `background_distributed_schedule_pool_size`, `background_common_pool_size`, `background_merges_mutations_concurrency_ratio`, `default_database`, `total_memory_profiler_step`, `dictionaries_lazy_load`, `opentelemetry_span_log_enabled`, `opentelemetry_span_log_retention_size`, `opentelemetry_span_log_retention_time`, `query_views_log_enabled`, `query_views_log_retention_size`, `query_views_log_retention_time`, `asynchronous_metric_log_enabled`, `asynchronous_metric_log_retention_size`, `asynchronous_metric_log_retention_time`, `session_log_enabled`, `session_log_retention_size`, `session_log_retention_time`, `zookeeper_log_enabled`, `zookeeper_log_retention_size`, `zookeeper_log_retention_time`, `asynchronous_insert_log_enabled`, `asynchronous_insert_log_retention_size`, `asynchronous_insert_log_retention_time` - ClickHouse server parameters. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/settings-list).
        /// </summary>
        [Input("logLevel", required: true)]
        public Input<string> LogLevel { get; set; } = null!;

        [Input("markCacheSize", required: true)]
        public Input<int> MarkCacheSize { get; set; } = null!;

        [Input("maxConcurrentQueries", required: true)]
        public Input<int> MaxConcurrentQueries { get; set; } = null!;

        [Input("maxConnections", required: true)]
        public Input<int> MaxConnections { get; set; } = null!;

        [Input("maxPartitionSizeToDrop", required: true)]
        public Input<int> MaxPartitionSizeToDrop { get; set; } = null!;

        [Input("maxTableSizeToDrop", required: true)]
        public Input<int> MaxTableSizeToDrop { get; set; } = null!;

        /// <summary>
        /// MergeTree engine configuration. The structure is documented below.
        /// </summary>
        [Input("mergeTree", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs> MergeTree { get; set; } = null!;

        [Input("metricLogEnabled", required: true)]
        public Input<bool> MetricLogEnabled { get; set; } = null!;

        [Input("metricLogRetentionSize", required: true)]
        public Input<int> MetricLogRetentionSize { get; set; } = null!;

        [Input("metricLogRetentionTime", required: true)]
        public Input<int> MetricLogRetentionTime { get; set; } = null!;

        [Input("opentelemetrySpanLogEnabled", required: true)]
        public Input<bool> OpentelemetrySpanLogEnabled { get; set; } = null!;

        [Input("opentelemetrySpanLogRetentionSize", required: true)]
        public Input<int> OpentelemetrySpanLogRetentionSize { get; set; } = null!;

        [Input("opentelemetrySpanLogRetentionTime", required: true)]
        public Input<int> OpentelemetrySpanLogRetentionTime { get; set; } = null!;

        [Input("partLogRetentionSize", required: true)]
        public Input<int> PartLogRetentionSize { get; set; } = null!;

        [Input("partLogRetentionTime", required: true)]
        public Input<int> PartLogRetentionTime { get; set; } = null!;

        /// <summary>
        /// Query cache configuration. The structure is documented below.
        /// </summary>
        [Input("queryCache", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheInputArgs> QueryCache { get; set; } = null!;

        [Input("queryLogRetentionSize", required: true)]
        public Input<int> QueryLogRetentionSize { get; set; } = null!;

        [Input("queryLogRetentionTime", required: true)]
        public Input<int> QueryLogRetentionTime { get; set; } = null!;

        [Input("queryMaskingRules")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs>? _queryMaskingRules;

        /// <summary>
        /// Query masking rules configuration. The structure is documented below.
        /// </summary>
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs> QueryMaskingRules
        {
            get => _queryMaskingRules ?? (_queryMaskingRules = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs>());
            set => _queryMaskingRules = value;
        }

        [Input("queryThreadLogEnabled", required: true)]
        public Input<bool> QueryThreadLogEnabled { get; set; } = null!;

        [Input("queryThreadLogRetentionSize", required: true)]
        public Input<int> QueryThreadLogRetentionSize { get; set; } = null!;

        [Input("queryThreadLogRetentionTime", required: true)]
        public Input<int> QueryThreadLogRetentionTime { get; set; } = null!;

        [Input("queryViewsLogEnabled", required: true)]
        public Input<bool> QueryViewsLogEnabled { get; set; } = null!;

        [Input("queryViewsLogRetentionSize", required: true)]
        public Input<int> QueryViewsLogRetentionSize { get; set; } = null!;

        [Input("queryViewsLogRetentionTime", required: true)]
        public Input<int> QueryViewsLogRetentionTime { get; set; } = null!;

        /// <summary>
        /// RabbitMQ connection configuration. The structure is documented below.
        /// </summary>
        [Input("rabbitmq", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqInputArgs> Rabbitmq { get; set; } = null!;

        [Input("sessionLogEnabled", required: true)]
        public Input<bool> SessionLogEnabled { get; set; } = null!;

        [Input("sessionLogRetentionSize", required: true)]
        public Input<int> SessionLogRetentionSize { get; set; } = null!;

        [Input("sessionLogRetentionTime", required: true)]
        public Input<int> SessionLogRetentionTime { get; set; } = null!;

        [Input("textLogEnabled", required: true)]
        public Input<bool> TextLogEnabled { get; set; } = null!;

        [Input("textLogLevel", required: true)]
        public Input<string> TextLogLevel { get; set; } = null!;

        [Input("textLogRetentionSize", required: true)]
        public Input<int> TextLogRetentionSize { get; set; } = null!;

        [Input("textLogRetentionTime", required: true)]
        public Input<int> TextLogRetentionTime { get; set; } = null!;

        [Input("timezone", required: true)]
        public Input<string> Timezone { get; set; } = null!;

        [Input("totalMemoryProfilerStep", required: true)]
        public Input<int> TotalMemoryProfilerStep { get; set; } = null!;

        [Input("traceLogEnabled", required: true)]
        public Input<bool> TraceLogEnabled { get; set; } = null!;

        [Input("traceLogRetentionSize", required: true)]
        public Input<int> TraceLogRetentionSize { get; set; } = null!;

        [Input("traceLogRetentionTime", required: true)]
        public Input<int> TraceLogRetentionTime { get; set; } = null!;

        [Input("uncompressedCacheSize", required: true)]
        public Input<int> UncompressedCacheSize { get; set; } = null!;

        [Input("zookeeperLogEnabled", required: true)]
        public Input<bool> ZookeeperLogEnabled { get; set; } = null!;

        [Input("zookeeperLogRetentionSize", required: true)]
        public Input<int> ZookeeperLogRetentionSize { get; set; } = null!;

        [Input("zookeeperLogRetentionTime", required: true)]
        public Input<int> ZookeeperLogRetentionTime { get; set; } = null!;

        public GetMdbClickhouseClusterClickhouseConfigInputArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigInputArgs Empty => new GetMdbClickhouseClusterClickhouseConfigInputArgs();
    }
}
